{
	"blogs": [
		{
			"title": "JavaScript, Anyone?",
			"content": "<p>Hello World! I have seen this so many times recently.  Why? To make sure my JavaScript file is successfully linked to my HTML file. This is the one of the first (but probably the single most important) lessons I have learned in my short tenure with NSS. If CSS and JS are not linked properly, then everything I have done with those languages is all for naught.</p><p>So let me back up a bit. I am in the beginning stages of a year-long, part-time evening bootcamp to become a software developer.  I literally never thought those words ever come out of my brain.  Ever.  I thought that was above my brain level.  All that gibberish I would see when I would accidentally, somehow, launch the inspector inside a web browser, looked like hieroglyphics.  An unknown type of communication.  And previously, it was.  Now, with 3 weeks of the bootcamp and 3 weeks of the NSS JumpStart class in my rear view mirror, I understand it more than I ever thought possible. I am not so arrogant to say that I understand even a quarter of it, but being able to read and understand even the smallest fraction of any code is more than I can say about myself two months ago.  I am proud of that!</p><p>Specifically about JavaScript, this is what I have learned so far.  It can make life as a developer work more efficiently, but it comes with mucho frustration.  I am definitely going to have to take JS one chunk at a time. We have recently focused on for loops.  Wow!  My first hurdle? Iteration. I had to figure out what in the world that word meant.  I can't say that I still fully understand it, but I now have a basic working knowledge of it.  It is a process that repeats until it is told to stop.  I may be right, and yet I may be wrong.  But that's what it means to me right now in this moment.  I also have learned that syntax will make or break your code. However, there are plenty of resources available to help you make sure your syntax is correct.  What really requires my focus is understanding how and why processes work, and when to implement them.  I feel like once I get that, like really get it, I will be cooking with gas!  Right now, I'm just trying to turn on the gas tank!</p>",
			"date": "July 26, 2017"
		},
		{
			"title": "I Don't Want to Fix It! I Want to Understand It!",
			"content": "<p>Five weeks. We have been in class now for five weeks. Already, I have questioned multiple times whether or not I am cut out for this, but every time I convince myself that I am. I just have to keep pushing forward, stretch my brain, and work until I understand it. Easier said than done. But, I am determined to do just that.</p> <p>A lot of people want to simply know how to fix it. At my current job, people ask me all the time to 'just fix it' without understanding the why or how behind it. I am not that person. I question the hows and whys of everything. Maybe that's a good thing, maybe not. But it's me.</p> <p>The past couple of weeks, we have been working on functions in JavaScript. I have been able to make my code work, through the help of others, but I haven't quite figured out the hows and whys of functions. It just hasn't clicked yet. I feel like I am getting close to the <strong>ah-ha</strong> moment that I crave. But until then, I am continuing to work hard at trying to figure it out. I know that functions are at the very heart of JavaScript, so it is so important for me to get it to click. I can understand the basics, but when variable names are all over the place, I have a hard time figuring out what variable to put where, how and where to define all the variables, and when to call the function. I believe, though, that with more practice, I will see it. I don't just want to 'just do it', I want to understand it.</p>",
			"date": "August 7, 2017"
		},
		{
			"title": "Collaboration",
			"content": "<p>When I went to college, there was a building where all of the engineers/tech-y people had their classes. I did not have one class in that building the entire 4 years I was there. The group of people that frequented that building were always somewhat of a mystery to me. Most of them were loners, or at least I perceived them that way. It seemed like they were alone most of the time. I was a bit scared to talk to them because they seemed so much smarter than me. I feared I wouldn't be able to understand anything they said. Plus, I just assumed they preferred being alone, so I didn't bother them. For so many years, I have had the perception that computer programmers were loners who hid from everyone else, did their job, and then went home. Boy was I wrong!</p><p>Since the second week of this program, we have been in a study group with 3-4 other people. I have learned so much simply by talking through problems and concepts with my study group. This has truly been invaluable.</p><p>We recently completed our first group project. This really opened my eyes to how group-oriented software development truly is. We had to depend on everyone in the group to do their part so that we completed the project. If I didn't do my part, the work would have fallen on someone else, or the project wouldn't have been successful. We all had tasks like that. It was hard for me to not have control over every aspect of the project that my name was attached to. I have always had the mentality that if you want something done right, do it yourself. But what I found out is that when you learn to trust the people working with you, great things can happen. I absolutely loved the way our project turned out. I couldn't have created it on my own. We all had great ideas, and the end result was a culmination of all of them. I am learning more every day, and not only because of the instructors. It is largely because of my study group.</p><p>As I am in the thick of this program, I now know that software development is not a lonely profession. It is absolutely a team sport.",
			"date": "August 14, 2017"
		},
		{
			"title": "JavaScript, Listen Up!",
			"content": "<p>Hello? Can anyone hear me? Sometimes I feel like I am talking to my child when I am trying to create event listeners - I tell JavaScript to listen but it doesn't hear me! It seems that JavaScript has selective hearing, and I am trying to learn it's language!</p><p>I have really enjoyed learning about event listeners. I like the idea of telling my code to do something when something else happens. It feels like I am making magic! When I get it to work, I am ecstatic. It just seems so cool to watch it happen. However, I have been having a hard time with the syntax and where to put them in my code. When I write an event listener, it feels like a sad little puppy sitting all alone, waiting to be called. That really throws me for a loop. When event listeners are inside a function, I get it. But when they are hanging out as their own block of code, it feels out of place. Not routine.</p><p>I struggle with where to put them also. I understand that JS hoists functions to the top, but event listeners seem to just sit there. Because JavaScript feels so structured to me, it kind of throws me for a loop to have that code just sitting out there, waiting. But I do get the concept - here's a block of code that is listening for something to happen, such as a a mouse click, to execute. So in reality, JavaScript is a better listener than my kids, because it is forever listening. I just have to make sure I tell it in the correct format what to listen for, and what action I want it to take. JavaScript is all ears!",
			"date": "August 22, 2017"
		},
		{
			"title": "XHR",
			"content": "<p>This week, we were introduced to JSON files and XHR requests. As tedious as this process seems, I feel like it makes handling data more efficient. Adding, removing, and editing data can be done in the JSON file, and it gets changed everywhere it is needed. It really makes sense to make data more dynamic, when you think of the real-world application of creating viable web applications. It won't be just a few objects in an array. There will be loads and loads of data, so being able to work with the data in one place as opposed to several seems to make sense. That leaves less room for error. I am currently writing this blog post in a JSON file, instead of having to add it in the html or JavaScript file. Pretty cool!</p>",
			"date": "August 29, 2017"
		},
		{
			"title": "Lace Up Those <em>Boots</em>, It's Time to <em>Strap</em>!",
			"content": "<p>Can you guess what I learned this week? I will give you 3 guesses! No, it's not about putting on shoes. No, it's not making leather straps. Yes! It's Bootstrap! Well, I am sure if you are reading this, you knew the answer right off the bat. But, had I heard the word 'Bootstrap' three months ago, I would have thought about shoes. Turns out, in the software development world, shoes are optional, so my thoughts were way off!</p><p>Bootstrap is a framework for web design and development. It definitely seems to make developers' lives much easier when it comes to styling your web applications. It doesn't fully replace needing a good understanding of CSS, but it sure is a timesaver when working on styling. I like the usefulness of being able to grab a code snipit, use it in your project, and have an pre-styled button. Need a nav bar, Bootstrap has it. Need a table or a form?  Bootstrap.  Those a just a few examples of how useful it is. But, there is so much more to Bootstrap than those things. I love the grid system idea for a layout structure. It makes sense to me to divide your workspace into even sections. Whether you want 3 columns, 6 columns, or 12 columns, Bootstrap divides the workspace appropriately. This is a great resource to make web applications look nice and make sense. I can't wait to learn and utilize more Bootstrap in my projects!</p>",
			"date": "September 5, 2017"
		},
		{
			"title": "Task Runners and Browserify",
			"content": "<p>Prior to learning about task runners, I often wished for something that could help me find my mistakes quicker.  Looking at your code for an hour or more only to figure out you left out a semicolon is not my idea of a good time!  Then, all of the sudden, Grunt entered my life!  I know there are a lot of people who get very frustrated with Grunt. And yes, it can be very frustrating when Grunt grunts at you. But, I am very thankful for the extra help in finding my mistakes. Will it find them all? Of course not, but it sure helps me track down bits of code that are causing me problems. Using a task runner has actually improved my skills. As I always say, mistakes are where we learn.</p><p>We also learned about browserify, which is a modular approach to organizing code. Being an educator means you have to be very organized, so this was a natural mindset for me. If anything made sense to me from the beginning of the process, it was browserify. Separating the code into separate files helps me “follow the data” as it flows through the application. It also makes it easier to find mistakes. The hard part for me about browserify is thinking through the planning process of the entire application at the beginning, and deciding how to organize the files before I actually begin coding.  It is not an easy process, but if done correctly, it makes your code more readable and more understandable. </p>",
			"date": "September 18, 2017"
		},
		{
			"title": "Chatty Project and jQuery",
			"content": "We just finished a group project called Chatty.  We were reorganized into new small groups, so we had to learn how to work with new people. I will just say, Chatty was an appropriate name for this group project. My group was very talkative about everything OTHER than the project at hand. So much time was wasted because of this. And it showed in our project. We were able to complete the requirements of the project, but only because we had to dig in when there was not much time left and work it out. The main thing I learned from this project is that the success of your project depends heavily on your planning. We did not plan well at all, and we were putting out fires left and right and having to refactor our code for the next issue that arose. So, when you think you are planned out well, go back and plan some more.",
			"date": "October 7, 2017"
		},
		{
			"title": "Empty Promises?",
			"content": "<p>Promises = my mind blown!  Wow, I have really struggled with understanding synchronous versus asynchronous data. I have had to focus so much on just the syntax of writing a promise, that I haven’t had a lot of time to try to understand what I am actually doing. I would like a deeper understanding of what a promise actually does, and how to use the data that a promise gives me. Part of my struggle is learning how to access the data when I have objects inside an array, and an array inside that object that is inside an array. It gets very complicated very quickly. Once I understand how to get into the data, I will feel much better with being able to use the data appropriately. I get the feeling that promises are a vital part of what I will be doing as a developer, so it is very important to me to gain a better of how and why promises work.</p>",
			"date": "October 17, 2017"
		},
		{
			"title": "Apis",
			"content": "<p>We began learning about Apis this week. First lesson – read the docs! Second lesson – not all Apis are created equal. Third lesson - using a well-organized Api service with well-written documentations is vital to one’s success.  We used the NASA picture of the day in the lesson where we first learned about Apis. It was so cool that the background picture changed automatically every day. </p>",
			"date": "October 24, 2017"
		},
		{
			"title": "Firebase",
			"content": "<p>I have a deployed website!  How cool is that?!?!  We recently learned about using Firebase to deploy our projects. I find that I am going through the steps correctly, but I am not necessarily sure about why I have to do each step. I like to know why I do each step. I feel like that will help me troubleshoot issues should they arise. I believe that the more I work with deployment, the better my understanding will become. I learn best by doing. </p>",
			"date": "October 31, 2017"
		},
		{
			"title": "Team Theme Park",
			"content": "<p>New groups, new project. Groups changed again, and of course that means a new group project. This time, we built a theme park map. This project forced us to use all the technologies that we have learned to date, including deployment through Firebase. The toughest part of this project was doing it EXACTLY how it was stated in the work tickets. We were told that we had no creative license with this project. When are used to deciding how the application will look, it’s tough to take a step back from that. I wanted to put a heading here, a picture there. I wanted it to look the way I chose, and it was very frustrating that it couldn’t. But, that’s real life. Expectations will be set, and I have to meet them, whether or not I like it.</p> <p>I also learned another valuable lesson -don’t get too attached to my own code. I was assigned a ticket that was almost exactly the same as another ticket assigned to another group member. There was only one relatively small item that was different. Our tickets both related to time and had the same objective. The only difference was that mine was supposed to use the current time and the other ticket was supposed to pull a time that was selected by the user. We pair programmed for much of it. But there were also times that we worked individually. We had two similar sets of code, but the project only needed the code once. We did a good job of meshing our code – it wasn’t all mine and it wasn’t all hers. This was what worked the best, and the project was successful. But I would be lying if I said that I wasn’t disappointed that not ALL of my code was used. Again, this is real life, so I am glad I learned this lesson now instead of later. </p>",
			"date": "November 13, 2017"
		},
		{
			"title": "AngularJS",
			"content": "<p>Every time we change concepts, I feel like I have started over in an alternate universe. It is definitely no different with AngularJS. Learning a new syntax protocol every other month is a lot to remember. Even though we are learning a new framework, I feel as though I am have made a lot of progress throughout this program. While I haven't necessarily felt a light switch turn on, I have felt myself steadily increasing my capacity for being able to think through the problems and write more concise, cleaner code.</p><p>One thing that I am having a hard time wrapping my mind around is conditional statements and click events in AngularJS. Again, I think this is a syntax thing. It feels weird to separate the if (conditional) and what happens if the condition is met. In the particular project we have been working on, a My Contacts app, the instructions were to have a star outline on every contact card. When clicked, the star should be filled in to show that it is a favorite. Normally, I would write a conditional, that, in summary, printed one or the other icons to the DOM. With AngularJS, I wrote two separate functions, one to change the value to false and the other to true. I then had to write both buttons in the html with an ng-if to evaluate whether or not the current value was true or false, then print to the DOM the correct button. I then used an ng-click to invoke the correct function to change the value when the button was clicked. The logic feels more complicated, but I am sure as I use it more, I will understand and be able to employ that logic more easily. I am very happy to be learning AngularJS, as I feel like it will be very valuable in my future."
		}
	],
		"projects": [
			{
				"name": "CSS Selectors0",
				"description": "This project was completed in the early part of the Front End Development class. It was practice with CSS selectors.",
				"screenshot": "../images/css-selectors.PNG",
				"github": "https://github.com/kstoops815/css-selectors"
			},
			{
				"name": "CSS Selectors1",
				"description": "This project was completed in the early part of the Front End Development class. It was practice with CSS selectors.",
				"screenshot": "../images/css-selectors.PNG",
				"github": "https://github.com/kstoops815/css-selectors"
			},
			{
				"name": "CSS Selectors2",
				"description": "This project was completed in the early part of the Front End Development class. It was practice with CSS selectors.",
				"screenshot": "../images/css-selectors.PNG",
				"github": "https://github.com/kstoops815/css-selectors"
			},
			{
				"name": "CSS Selectors3",
				"description": "This project was completed in the early part of the Front End Development class. It was practice with CSS selectors.",
				"screenshot": "../images/css-selectors.PNG",
				"github": "https://github.com/kstoops815/css-selectors"
			}
	]
}